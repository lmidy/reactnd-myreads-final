{"version":3,"sources":["Components/Book.js","Components/BookShelf.js","BooksAPI.js","Components/ListBooks.js","Components/OpenSearch.js","Components/Home.js","Components/SearchBooks.js","App.js","index.js"],"names":["Book","_this$props","this","props","book","onShelfUpdate","undefined","imageLinks","thumbnail","react_default","a","createElement","className","style","width","height","alt","src","onChange","e","target","value","shelf","disabled","title","authors","join","Component","BookShelf","books","map","key","id","Components_Book","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","update","method","Object","objectSpread","Content-Type","body","JSON","stringify","ListBooks","state","shelfName","_this","updateIndex","findIndex","b","updateBook","setState","toConsumableArray","slice","BooksAPI","_this2","Components_BookShelf","filter","OpenSearch","react_router_dom","to","Home","Components_ListBooks","Components_OpenSearch","SearchBooks","booksOnMyList","booksQuery","handleBookShelfChange","onBookShelfChange","clearQuery","allBooks","query","_this3","console","log","updateQuery","results","length","searchResults","s","_this4","onClick","type","placeholder","searchBooks","App","react_router","exact","path","component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.95cf72d9.chunk.js","sourcesContent":["import React , { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Book extends Component {\n    render() {\n      const {book, onShelfUpdate} = this.props\n      if(book.imageLinks === undefined ) {\n            book.imageLinks = ['thumbnail'];\n            book.imageLinks.thumbnail = '';\n        }\n\n      return (\n          <div className=\"book\">\n              <div className=\"book-top\">\n                  <div className=\"book-cover\" style={{ width: 128, height: 193 }}>\n                      <img alt=\"\" src={book.imageLinks.thumbnail} style={{ width: 128, height: 193 }}/>\n                  </div>\n                  <div className=\"book-shelf-changer\">\n                      <select onChange={e => onShelfUpdate(book, e.target.value)} value={book.shelf}>\n                          <option value=\"move\" disabled>Move to...</option>\n                          <option value=\"currentlyReading\" >Currently Reading</option>\n                          <option value=\"wantToRead\" >Want to Read</option>\n                          <option value=\"read\" >Read</option>\n                          <option value=\"none\" >None</option>\n                      </select>\n                  </div>\n              </div>\n              <div className=\"book-title\">{book.title ? book.title : ''}</div>\n              <div className=\"book-authors\">{book.authors ? book.authors.join(', ') : 'No Author Found'}</div>\n          </div>\n        )\n      }\n}\n\nBook.propTypes = {\n  book: PropTypes.object.isRequired,\n  onShelfUpdate: PropTypes.func\n}\n\nexport default Book\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Book from './Book';\n\nclass BookShelf extends Component {\n  render() {\n    const {title, books, onShelfUpdate} = this.props\n      return (\n        <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">{title}</h2>\n              <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                      {books.map((book) => (\n                          <li key={book.id}>\n                              <Book\n                                  book={book}\n                                  onShelfUpdate={onShelfUpdate}\n                              />\n                          </li>\n                      ))}\n                  </ol>\n              </div>\n          </div>\n        )\n  }\n}\n\nBookShelf.propTypes = {\n  title: PropTypes.string.isRequired,\n  books: PropTypes.array,\n  onShelfUpdate: PropTypes.func\n}\n\nexport default BookShelf\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React , { Component } from 'react';\nimport BookShelf from './BookShelf';\nimport * as BooksAPI from '../BooksAPI'\n\nclass ListBooks extends Component {\n\n  state = {\n    books: []\n  }\n\n  componentDidMount() {\n      BooksAPI.getAll()\n        .then((books) => {\n          this.setState({ books: books });\n        })\n  }\n\n  onShelfUpdate = (book, shelfName) => {\n   const { books } = this.state\n \t    const updateIndex = books.findIndex(b => b.id === book.id)\n   const updateBook = books[updateIndex]\n   updateBook.shelf = shelfName\n\n   this.setState({\n     books: [...books.slice(0, updateIndex), updateBook, ...books.slice(updateIndex + 1)]\n     })\n\n     BooksAPI.update(book, shelfName)\n   }\n\n    render() {\n      const { books } = this.state\n        return (\n          <div className=\"list-books\">\n            <div className=\"list-books-content\">\n                <div>\n                    <BookShelf\n                        title=\"Currently Reading\"\n                        books={books.filter(book => book.shelf === 'currentlyReading')}\n                        onShelfUpdate={this.onShelfUpdate}\n                    />\n                    <BookShelf\n                        title=\"Want to Read\"\n                        books={books.filter(book => book.shelf === 'wantToRead')}\n                        onShelfUpdate={this.onShelfUpdate}\n                    />\n                    <BookShelf\n                        title=\"Read\"\n                        books={books.filter(book => book.shelf === 'read')}\n                        onShelfUpdate={this.onShelfUpdate}\n                    />\n                </div>\n            </div>\n          </div>\n        )\n    }\n}\n\nexport default ListBooks\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst OpenSearch = (props) => {\n  return (\n    <div className=\"open-search\">\n      <Link to=\"/search\">\n        <button>Add a book</button>\n        </Link>\n    </div>\n  )\n}\n\nexport default OpenSearch\n","import React from 'react';\nimport ListBooks from './ListBooks';\nimport OpenSearch from './OpenSearch'\n\nconst Home = (props) => {\n  return (\n    <div className=\"home\">\n      <div className=\"list-books-title\">\n          <h1>My Reads</h1>\n          </div>\n      <ListBooks />\n      <OpenSearch />\n    </div>\n  )\n}\n\nexport default Home\n","import React , { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as BooksAPI from '../BooksAPI';\nimport Book from './Book';\n\nclass SearchBooks extends Component {\n  state = {\n      books: [],\n      booksOnMyList: [],\n      booksQuery: ''\n  }\n\n  componentDidMount() {\n   BooksAPI.getAll().then(allBooks => {\n     this.setState({\n       booksOnMyList: allBooks.filter(book => book.shelf !== 'none')\n        })\n      })\n    }\n\n    handleBookShelfChange = (book, shelf) => {\n        this.props.onBookShelfChange(book, shelf);\n    }\n\n    updateQuery(booksQuery) {\n        this.setState({ booksQuery })\n      }\n    //find books that are in my list and in the searched query list and update to match the my shelf state\n    searchBooks(booksQuery) {\n        const { booksOnMyList } = this.state\n        console.log(booksOnMyList)\n  \t     this.updateQuery(booksQuery)\n        if (booksQuery) {\n          BooksAPI.search(booksQuery, 20).then((results) => {\n            if (results && results.length > 0) {\n              console.log(results)\n              let searchResults = results\n          \t  searchResults.map((book) => book.shelf = 'none' )\n          \t  booksOnMyList.map((book) => {\n                  const updateIndex = searchResults.findIndex(s => s.id === book.id)\n        \t\t      if (searchResults[updateIndex] ) {\n        \t\t          searchResults[updateIndex].shelf = book.shelf\n                    }\n                  return searchResults;\n\n                  })\n              this.setState({ books: searchResults })\n\n            } else {\n              this.setState({ books: [] })\n            }\n          })\n        } else {\n          this.setState({ books: [] })\n\n        }\n      }\n\n      onShelfUpdate = (book, shelfName) => {\n        BooksAPI.update(book, shelfName)\n        const { books } = this.state\n   \t    const updateIndex = books.findIndex(b => b.id === book.id)\n        const updateBook = books[updateIndex]\n        updateBook.shelf = shelfName\n        this.setState({\n          books: [...books.slice(0, updateIndex), updateBook, ...books.slice(updateIndex + 1)]\n        })\n      }\n\n      clearQuery = () => {\n              this.setState({\n                books: [],\n                booksOnMyList: [],\n                booksQuery: ''\n              })\n          }\n\n\n    render() {\n      const { books } = this.state\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                 \t  <Link to=\"/\"\n                      className=\"close-search\"\n                      onClick={this.clearQuery}\n                      >Close\n                    </Link>\n                    <div className=\"search-books-input-wrapper\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"Search by title or author\"\n                                onChange={(e) => this.searchBooks(e.target.value)}\n                            />\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {books.map((book) => (\n                            <li key={book.id}>\n                                <Book\n                                    book={book}\n                                    onShelfUpdate={this.onShelfUpdate}\n                                />\n                            </li>\n                        ))}\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBooks\n","import React , {Component} from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './Components/Home';\nimport SearchBooks from './Components/SearchBooks';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n      \t<Switch>\n      \t  <Route exact path=\"/\" component={Home} />\n      \t  <Route path=\"/search\" component={SearchBooks} />\n      \t</Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(<BrowserRouter>\n    <App /></BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}